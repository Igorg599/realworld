import React, { useEffect, useContext, useState } from 'react';
import { Link, Redirect } from 'react-router-dom';

import useFetch from 'hooks/useFetch';
import Loading from 'components/loading';
import TagList from 'components/tagList';
import ErrorMessage from 'components/errorMessage';
import { CurrentUserContext } from 'contexts/currentUser';

const Article = props => {
    const slug = props.match.params.slug
    const apiUrl = `/articles/${slug}`
    const [{ response: fetchArticleREsponse, error: fetchArticleError, isLoading: fetchArticleLoading }, doFetch] = useFetch(apiUrl)
    const [{ response: deleteArticleResponse}, doDeleteArticle] = useFetch(apiUrl)
    const [currentUserState] = useContext(CurrentUserContext)
    const [isSuccessfullDelete, setIsSuccessfullDelete] = useState(false)

    const isAuthor = () => {
        if (!fetchArticleREsponse || !currentUserState.isLoggedIn) {
            return
        }
        return (
            
            fetchArticleREsponse.article.author.username === currentUserState.currentUser.username
        )
    }

    const deleteArticle = () => {
        doDeleteArticle({
            method: 'delete'
        })
    }

    useEffect(() => {
        doFetch()
    }, [doFetch])

    useEffect(() => {
        if(!deleteArticleResponse) {
            return
        }
        setIsSuccessfullDelete(true)
    }, [deleteArticleResponse])

    if (isSuccessfullDelete) {
        return <Redirect to='/'/>
    }

    return (
        <div className='article-page'>
            <div className='banner'>
                {!fetchArticleLoading && fetchArticleREsponse && (
                    <div className='container'>
                        <h1>{fetchArticleREsponse.article.title}</h1>
                        <div className='article-meta'>
                            <Link to={`profiles/${fetchArticleREsponse.article.author.username}`}>
                                <img src={fetchArticleREsponse.article.author.image} alt='' />
                            </Link>
                            <div className='info'>
                                <Link to={`profiles/${fetchArticleREsponse.article.author.username}`}>
                                    {fetchArticleREsponse.article.author.username}
                                </Link>
                                <span className='date'>{fetchArticleREsponse.article.createdAt}</span>
                            </div>
                            {isAuthor() && (
                                <span>
                                    <Link className='btn btn-outline-secondary btn-sm'  to={`/articles/${fetchArticleREsponse.article.slug}/edit`}>
                                        <i className='ion-edit'></i>
                                        Edit Article
                                    </Link>
                                    <button className='btn btn-outline-danger btn-sm' onClick={deleteArticle}>
                                        <i className='ion-trash-a'></i>
                                        Delete article
                                    </button>
                                </span>
                            )}
                        </div>
                    </div>
                )}
            </div>
            <div className='container page'>
                {fetchArticleLoading && <Loading />}
                {fetchArticleError && <ErrorMessage />}
                {!fetchArticleLoading && fetchArticleREsponse && (
                    <div className='row article-content'>
                        <div className='col-xs-12'>
                            <div>
                                <p>{fetchArticleREsponse.article.body}</p>
                            </div>
                            <TagList tags={fetchArticleREsponse.article.tagList} />
                        </div>
                    </div>
                )}
            </div>
        </div>
    )
}

export default Article;